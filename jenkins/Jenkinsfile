pipeline {
    agent any

    tools {
        maven 'maven'
        nodejs 'nodejs'
    }

    environment {
        DOCKER_REGISTRY = "maltsevvm"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/food-delivery-frontend"
        ORDER_IMAGE = "${DOCKER_REGISTRY}/order-service"
        RESTAURANT_IMAGE = "${DOCKER_REGISTRY}/restaurant-service"
        NOTIFICATION_IMAGE = "${DOCKER_REGISTRY}/notification-service"
        BUILD_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: params.BRANCH_NAME ?: 'main', url: 'https://github.com/vmmaltsev/food-delivery-project.git'
            }
        }

        stage('Verify Tools Installation') {
            steps {
                script {
                    sh 'mvn -version'
                    sh 'node -v'
                    sh 'npm -v'
                }
            }
        }

        stage('Build & Test Backend Services') {
            parallel {
                stage('Order Service') {
                    steps {
                        dir('order-service') {
                            sh 'mvn clean test package'
                        }
                    }
                }
                stage('Restaurant Service') {
                    steps {
                        dir('restaurant-service') {
                            sh 'mvn clean test package'
                        }
                    }
                }
                stage('Notification Service') {
                    steps {
                        dir('notification-service') {
                            sh 'mvn clean test package'
                        }
                    }
                }
            }
        }

        stage('Build & Test Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Order Image') {
                    steps {
                        buildDockerImage(dir: 'order-service', image: ORDER_IMAGE)
                    }
                }
                stage('Build Restaurant Image') {
                    steps {
                        buildDockerImage(dir: 'restaurant-service', image: RESTAURANT_IMAGE)
                    }
                }
                stage('Build Notification Image') {
                    steps {
                        buildDockerImage(dir: 'notification-service', image: NOTIFICATION_IMAGE)
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        buildDockerImage(dir: 'frontend', image: FRONTEND_IMAGE)
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-hub-credentials', url: "https://${DOCKER_REGISTRY}"]) {
                        def images = [ORDER_IMAGE, RESTAURANT_IMAGE, NOTIFICATION_IMAGE, FRONTEND_IMAGE]
                        def pushStages = [:]
                        images.each { image ->
                            def imageName = image.split('/').last()
                            pushStages["Push ${imageName}"] = {
                                pushDockerImage(image)
                            }
                        }
                        parallel pushStages
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        sh "helm lint ./helm/food-delivery-chart"
                        sh """
                            helm upgrade --install food-delivery ./helm/food-delivery-chart \
                            --set orderService.image.repository=${ORDER_IMAGE},orderService.image.tag=${BUILD_TAG} \
                            --set restaurantService.image.repository=${RESTAURANT_IMAGE},restaurantService.image.tag=${BUILD_TAG} \
                            --set notificationService.image.repository=${NOTIFICATION_IMAGE},notificationService.image.tag=${BUILD_TAG} \
                            --set frontend.image.repository=${FRONTEND_IMAGE},frontend.image.tag=${BUILD_TAG}
                        """
                        sh 'kubectl rollout status deployment/food-delivery'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILED'
                        // Добавьте уведомления или другие действия при ошибке
                        throw e
                    }
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: '**/target/*.jar, frontend/build/**', allowEmptyArchive: true
        }
        always {
            cleanWs()
        }
    }
}

// Функции для повторного использования
def buildDockerImage(Map params) {
    dir(params.dir) {
        script {
            def image = docker.build("${params.image}:latest")
            image.tag("${params.image}:${env.BUILD_TAG}")
        }
    }
}

def pushDockerImage(String image) {
    retry(3) {
        sh """
            docker push ${image}:latest
            docker push ${image}:${env.BUILD_TAG}
        """
    }
}
