pipeline {
    agent any

    tools {
        maven 'maven'  // Настроенный Maven в Jenkins
        nodejs 'nodejs' // Настроенный Node.js в Jenkins
    }

    environment {
        DOCKER_REGISTRY = "maltsevvm"
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/food-delivery-frontend"
        ORDER_IMAGE = "${DOCKER_REGISTRY}/order-service"
        RESTAURANT_IMAGE = "${DOCKER_REGISTRY}/restaurant-service"
        NOTIFICATION_IMAGE = "${DOCKER_REGISTRY}/notification-service"
        BUILD_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/vmmaltsev/food-delivery-project.git'
            }
        }

        stage('Verify Tools Installation') {
            steps {
                script {
                    sh 'mvn -version'
                    sh 'node -v'
                    sh 'npm -v'
                }
            }
        }

        stage('Build & Test Backend Services') {
            parallel {
                stage('Build Order Service') {
                    steps {
                        dir('order-service') {
                            cache(path: '~/.m2/repository', key: 'maven-deps') {
                                sh 'mvn clean test package'
                            }
                        }
                    }
                }
                stage('Build Restaurant Service') {
                    steps {
                        dir('restaurant-service') {
                            cache(path: '~/.m2/repository', key: 'maven-deps') {
                                sh 'mvn clean test package'
                            }
                        }
                    }
                }
                stage('Build Notification Service') {
                    steps {
                        dir('notification-service') {
                            cache(path: '~/.m2/repository', key: 'maven-deps') {
                                sh 'mvn clean test package'
                            }
                        }
                    }
                }
            }
        }

        stage('Build & Test Frontend') {
            steps {
                dir('frontend') {
                    cache(path: 'node_modules', key: 'npm-deps') {
                        sh 'npm install'
                    }
                    sh 'npm run build'
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Order Service Image') {
                    steps {
                        buildDockerImage( dir: 'order-service', image: ORDER_IMAGE )
                    }
                }
                stage('Build Restaurant Service Image') {
                    steps {
                        buildDockerImage( dir: 'restaurant-service', image: RESTAURANT_IMAGE )
                    }
                }
                stage('Build Notification Service Image') {
                    steps {
                        buildDockerImage( dir: 'notification-service', image: NOTIFICATION_IMAGE )
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        buildDockerImage( dir: 'frontend', image: FRONTEND_IMAGE )
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    dockerLogin()
                    def images = [ORDER_IMAGE, RESTAURANT_IMAGE, NOTIFICATION_IMAGE, FRONTEND_IMAGE]
                    parallel images.collectEntries { image ->
                        ["Push ${image.split('/').last()}" : {
                            pushDockerImage(image)
                        }]
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "helm lint ./helm/food-delivery-chart"

                    sh """
                        helm upgrade --install food-delivery ./helm/food-delivery-chart \
                        --set orderService.image.repository=${ORDER_IMAGE},orderService.image.tag=${BUILD_TAG} \
                        --set restaurantService.image.repository=${RESTAURANT_IMAGE},restaurantService.image.tag=${BUILD_TAG} \
                        --set notificationService.image.repository=${NOTIFICATION_IMAGE},notificationService.image.tag=${BUILD_TAG} \
                        --set frontend.image.repository=${FRONTEND_IMAGE},frontend.image.tag=${BUILD_TAG}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

// Функции для повторного использования
def buildDockerImage(Map params) {
    dir(params.dir) {
        sh """
            docker build -t ${params.image}:latest .
            docker tag ${params.image}:latest ${params.image}:${env.BUILD_TAG}
        """
    }
}

def dockerLogin() {
    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
    }
}

def pushDockerImage(String image) {
    retry(3) {
        sh """
            docker push ${image}:latest
            docker push ${image}:${env.BUILD_TAG}
        """
    }
}
